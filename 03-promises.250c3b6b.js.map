{"mappings":"AAAaA,SAASC,cAAc,SAC/BC,iBAAiB,UAkBtB,SAAyBC,GACvBA,EAAMC,iBACWC,OAAOF,EAAMG,OAAOC,SAASC,MAAMC,OAIpD,IAJA,IACMC,EAAYL,OAAOF,EAAMG,OAAOC,SAASI,KAAKF,OAC9CG,EAAcP,OAAOF,EAAMG,OAAOC,SAASM,OAAOJ,OAE/CK,EAAI,EAAGA,EAAIF,EAAaE,IAAK,CACpC,IAAMC,OAsCcC,KAAKC,SArCzBC,QAAQC,IAAIJ,GACZA,EAAQK,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUd,EAAKa,EAALb,MACtBU,QAAQC,IACN,uBAAwCI,OAAfD,EAAS,QAAYC,OAANf,EAAM,M,IAGjDgB,OAAM,SAAAH,G,IAAGC,EAAQD,EAARC,SAAUd,EAAKa,EAALb,MAClBU,QAAQC,IACN,sBAAuCI,OAAfD,EAAS,QAAYC,OAANf,EAAM,M,IAIrCE,C","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('.form');\nform.addEventListener('submit', onFormInputData);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = null\n  //   new Promise((resolve, reject) => {\n  //   setTimeout(() => {\n  //     if (shouldResolve) {\n  //       resolve({ position, delay });\n  //     } else {\n  //       reject({ position, delay });\n  //     }\n  //   }, delay);\n  // });\n  cnsole.log(promise)\n  return promise\n}\n\nfunction onFormInputData(event) {\n  event.preventDefault();\n  let delayInput = Number(event.target.elements.delay.value);\n  const stepInput = Number(event.target.elements.step.value);\n  const amountInput = Number(event.target.elements.amount.value);\n\n  for (let i = 0; i < amountInput; i++) {\n    const promise = createPromise(i, delayInput)\n    console.log(promise)\n    promise.then(({ position, delay }) => {\n        console.log(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        console.log(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    // На кожній єтерації додаємо - щоб наступний виклик проміса відбувся за новою затримакою \"Delay step\"\n    delayInput += stepInput;\n  }\n}\n\n\n// function createPromise(position, delay) {\n//     const shouldResolve = Math.random() > 0.3;\n//     return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n      \n//       if (shouldResolve) {\n//         resolve({ position, delay })\n//       } else {\n//         reject({ position, delay })\n//       }\n//     }, delay)\n//   })\n// }\n\n\n\n\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію \n// createPromise(position, delay) стільки разів, скільки ввели в поле amount.Під час кожного виклику передай \n// їй номер промісу(position), що створюється, і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step)."],"names":["document","querySelector","addEventListener","event","preventDefault","Number","target","elements","delay","value","stepInput","step","amountInput","amount","i","promise","Math","random","console","log","then","param","position","concat","catch"],"version":3,"file":"03-promises.250c3b6b.js.map"}