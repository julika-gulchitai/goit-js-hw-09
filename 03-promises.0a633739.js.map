{"mappings":"AAGA,SAASA,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAUtC,OATgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACLN,EACFI,EAAQ,CAAEN,SAAUA,EAAUC,MAAOA,IAErCM,EAAO,CAAEP,SAAUA,EAAUC,MAAOA,GAAQ,GAE7CA,EAAM,G,CAZAQ,SAASC,cAAc,QAC/BC,iBAAiB,UAgBtB,SAAyBC,GACvBA,EAAMC,iBACN,IAAIC,EAAaC,OAAOH,EAAMI,OAAOC,SAAShB,MAAMiB,OACpD,MAAMC,EAAYJ,OAAOH,EAAMI,OAAOC,SAASG,KAAKF,OAC9CG,EAAcN,OAAOH,EAAMI,OAAOC,SAASK,OAAOJ,OAExD,IAAK,IAAIK,EAAI,EAAGA,EAAIF,EAAaE,IAAK,CACpBxB,EAAcwB,EAAGT,GACzBU,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACtBwB,QAAQC,IACN,uBAAqB1B,QAAiBC,MAAU,IAGnD0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBwB,QAAQC,IACN,sBAAoB1B,QAAiBC,MAAU,IAIoBa,GAA3DK,C","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('form');\nform.addEventListener('submit', onFormInputData);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position: position, delay: delay });\n      } else {\n        reject({ position: position, delay: delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n\nfunction onFormInputData(event) {\n  event.preventDefault();\n  let delayInput = Number(event.target.elements.delay.value);\n  const stepInput = Number(event.target.elements.step.value);\n  const amountInput = Number(event.target.elements.amount.value);\n\n  for (let i = 0; i < amountInput; i++) {\n    const promise = createPromise(i, delayInput)\n    promise.then(({ position, delay }) => {\n        console.log(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        console.log(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    // На кожній єтерації додаємо - щоб наступний виклик проміса відбувся за новою затримакою \"Delay step\"\n    delayInput += stepInput;\n  }\n}\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію \n// createPromise(position, delay) стільки разів, скільки ввели в поле amount.Під час кожного виклику передай \n// їй номер промісу(position), що створюється, і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step)."],"names":["$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","delayInput","Number","target","elements","value","stepInput","step","amountInput","amount","i","then","console","log","catch"],"version":3,"file":"03-promises.0a633739.js.map"}