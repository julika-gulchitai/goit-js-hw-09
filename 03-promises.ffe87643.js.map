{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SA8CA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAUtC,OATgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACLN,EACFI,EAAQ,CAAEN,SAAUA,EAAUC,MAAOA,IAErCM,EAAO,CAAEP,SAAUA,EAAUC,MAAOA,GAAQ,GAE7CA,EAAM,G,CAZAQ,SAASC,cAAc,QAC/BC,iBAAiB,UAgBtB,SAAyBC,GACvBA,EAAMC,iBACN,IAAIC,EAAaC,OAAOH,EAAMI,OAAOC,SAAShB,MAAMiB,OACpD,MAAMC,EAAYJ,OAAOH,EAAMI,OAAOC,SAASG,KAAKF,OAC9CG,EAAcN,OAAOH,EAAMI,OAAOC,SAASK,OAAOJ,OAExD,IAAK,IAAIK,EAAI,EAAGA,EAAIF,EAAaE,IAAK,CACpBxB,EAAcwB,EAAGT,GACzBU,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACtBwB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqB3B,QAAiBC,MAAU,IAGnD2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBwB,EAAA5B,GAAS6B,OAAOG,QACd,sBAAoB7B,QAAiBC,MAAU,IAIoBa,GAA3DK,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n/*\n* @param1 {string}: Required, a text in string format.\n* @param2 {function | Object}: Optional, a callback function that will be called when the notification element has been clicked. Or, extending the initialize options with the new options for each notification element.\n* @param3 {Object}: Optional, extending the initialize options with new the options for each notification element. (If the second parameter has been already used for a callback function.)\n*/\n\n// // e.g. Only message\n// Notiflix.Notify.success('Sol lucet omnibus');\n\n// Notiflix.Notify.failure('Qui timide rogat docet negare');\n\n// Notiflix.Notify.warning('Memento te hominem esse');\n\n// Notiflix.Notify.info('Cogito ergo sum');\n\n// e.g. Message with a callback\n// Notiflix.Notify.success(\n//   'Click Me',\n//   function cb() {\n//     // callback\n//   },\n// );\n\n// e.g. Message with the new options\n// Notiflix.Notify.success(\n//   'Click Me',\n//   {\n//     timeout: 6000,\n//   },\n// );\n\n// e.g. Message with callback, and the new options\n// Notiflix.Notify.success(\n//   'Click Me',\n//   function cb() {\n//     // callback\n//   },\n//   {\n//     timeout: 4000,\n//   },\n// );\n\nconst form = document.querySelector('form');\nform.addEventListener('submit', onFormInputData);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position: position, delay: delay });\n      } else {\n        reject({ position: position, delay: delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n\nfunction onFormInputData(event) {\n  event.preventDefault();\n  let delayInput = Number(event.target.elements.delay.value);\n  const stepInput = Number(event.target.elements.step.value);\n  const amountInput = Number(event.target.elements.amount.value);\n\n  for (let i = 0; i < amountInput; i++) {\n    const promise = createPromise(i, delayInput)\n    promise.then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    // На кожній єтерації додаємо - щоб наступний виклик проміса відбувся за новою затримакою \"Delay step\"\n    delayInput += stepInput;\n  }\n}\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію \n// createPromise(position, delay) стільки разів, скільки ввели в поле amount.Під час кожного виклику передай \n// їй номер промісу(position), що створюється, і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step)."],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","delayInput","Number","target","elements","value","stepInput","step","amountInput","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.ffe87643.js.map"}